services:
  db:
    ports:
      - "5432:5432"

  api:
    build:
      target: builder
    ports:
      - "${DEV_API_PORT}:8000"
    environment:
      - APP_ENV=dev
    env_file:
      - .env.dev
    volumes:
      - ./src:/app/src
      # Also mount alembic files for development
      - ./alembic:/app/alembic
      # Mount tests so they can be run inside the container if needed
      - ./tests:/app/tests
    # The command enables hot-reloading with watchmedo
    command: >
      sh -c "
        . /app/.venv/bin/activate &&
        watchmedo auto-restart --directory ./src --pattern '*.py' --recursive --
        uvicorn src.main:app --host 0.0.0.0 --port 8000
      "

  db_test:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER_TEST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_TEST}
      - POSTGRES_DB=${POSTGRES_DB_TEST}
    # Use tmpfs to keep test database in memory for speed and easy cleanup
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER_TEST} -d ${POSTGRES_DB_TEST}" ]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    depends_on:
      db_test:
        condition: service_healthy
      test-ollama:
        condition: service_healthy
    env_file:
      - .env.dev
    environment:
      - APP_ENV=test
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER_TEST}:${POSTGRES_PASSWORD_TEST}@db_test:5432/${POSTGRES_DB_TEST}
      - POSTGRES_DB_TEST=${POSTGRES_DB_TEST}
      - OLLAMA_BASE_URL=http://test-ollama:11434
      - OLLAMA_MODEL=test-model
    volumes:
      - ./src:/app/src
      - ./alembic:/app/alembic
      - ./tests:/app/tests
    command: >
      sh -c "
        . /app/.venv/bin/activate &&
        echo 'Running migrations for test database...' &&
        alembic upgrade head &&
        echo 'Running pytest...' &&
        pytest
      "

  test-ollama:
    image: alpine:3.20
    command: >
      sh -c "
        apk add --no-cache netcat-openbsd &&
        echo -e 'HTTP/1.1 200 OK\\n\\n{}' | nc -lk -p 11434
      "
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "11434" ]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 1s
    restart: unless-stopped
