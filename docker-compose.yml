services:
  db:
    image: postgres:16-alpine
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  ollama:
    build:
      context: ./ollama
      args:
        - BUILT_IN_OLLAMA_MODEL=${BUILT_IN_OLLAMA_MODEL}
    entrypoint: ollama
    command: serve
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "${HOST_BIND_IP:-127.0.0.1}:8000:8000"
    depends_on:
      db:
        condition: service_healthy
      ollama:
        condition: service_started
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "python", "-c", "import sys, os, urllib.request; path=os.environ.get('HEALTHCHECK_PATH', '/health'); sys.exit(0) if urllib.request.urlopen(f'http://localhost:8000{path}') else sys.exit(1)" ]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local
