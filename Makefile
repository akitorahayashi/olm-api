# ==============================================================================
# Makefile for Project Automation
#
# Provides a unified interface for common development tasks, abstracting away
# the underlying Docker Compose commands for a better Developer Experience (DX).
#
# Inspired by the self-documenting Makefile pattern.
# See: https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
# ==============================================================================

# Ensure that the targets are always run
.PHONY: help setup up down logs shell format format-check lint lint-check test e2e-test migrate clean rebuild

# Default target executed when 'make' is run without arguments
.DEFAULT_GOAL := help

# Define the project name based on the directory name for dynamic container naming
PROJECT_NAME := $(shell basename $(CURDIR))

# Use sudo if the user is not root, to handle Docker permissions
SUDO := $(shell if [ $$(id -u) -ne 0 ]; then echo "sudo"; fi)

# Define project names for different environments
DEV_PROJECT_NAME := $(PROJECT_NAME)-dev
PROD_PROJECT_NAME := $(PROJECT_NAME)-prod
TEST_PROJECT_NAME := $(PROJECT_NAME)-test

# ==============================================================================
# HELP
# ==============================================================================

help: ## Show this help message
	@echo "Usage: make [target]"
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# ==============================================================================
# PROJECT SETUP & ENVIRONMENT
# ==============================================================================

setup: ## Initialize project: install dependencies, create .env files and pull required Docker images.
	@echo "Installing python dependencies with Poetry..."
	@poetry install --no-root
	@echo "Pulling PostgreSQL image..."
	$(SUDO) docker pull postgres:16-alpine
	@echo "Creating environment files..."
	@if [ ! -f .env.example ]; then echo ".env.example not found!"; exit 1; fi
	@BASE_DB_NAME=$$(grep POSTGRES_DB_NAME .env.example | cut -d '=' -f 2); \
	for env in dev prod test; do \
		echo "Creating .env.$${env}..."; \
		cp .env.example .env.$${env}; \
		DB_NAME="$${BASE_DB_NAME}-$${env}"; \
		echo "\n# Generated by 'make setup' for $${env} environment" >> .env.$${env}; \
		echo "POSTGRES_DB=$${DB_NAME}" >> .env.$${env}; \
		echo "DATABASE_URL=postgresql+psycopg://user:password@db:5432/$${DB_NAME}" >> .env.$${env}; \
	done

up: ## Start all development containers in detached mode
	@echo "Starting up development services..."
	@ln -sf .env.dev .env
	$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) up -d

down: ## Stop and remove all development containers
	@echo "Shutting down development services..."
	@ln -sf .env.dev .env
	$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) down --remove-orphans

clean: ## Stop and remove all dev containers, networks, and volumes (use with CONFIRM=1)
	@if [ "$(CONFIRM)" != "1" ]; then echo "This is a destructive operation. Please run 'make clean CONFIRM=1' to confirm."; exit 1; fi
	@echo "Cleaning up all development Docker resources (including volumes)..."
	@ln -sf .env.dev .env
	$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) down --volumes --remove-orphans

rebuild: ## Rebuild the api service without cache and restart it
	@echo "Rebuilding api service with --no-cache..."
	@ln -sf .env.dev .env
	$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) build --no-cache api
	$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) up -d api

up-prod: ## Start all production-like containers
	@echo "Starting up production-like services..."
	@ln -sf .env.prod .env
	$(SUDO) docker compose -f docker-compose.yml --project-name $(PROD_PROJECT_NAME) up -d --build --pull always --remove-orphans

down-prod: ## Stop and remove all production-like containers
	@echo "Shutting down production-like services..."
	@ln -sf .env.prod .env
	$(SUDO) docker compose -f docker-compose.yml --project-name $(PROD_PROJECT_NAME) down --remove-orphans

logs: ## View the logs for the development API service
	@echo "Following logs for the dev api service..."
	@ln -sf .env.dev .env
	$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) logs -f api

shell: ## Open a shell inside the running development API container
	@echo "Opening shell in dev api container..."
	@ln -sf .env.dev .env
	@$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) exec api /bin/sh || \
		(echo "Failed to open shell. Is the container running? Try 'make up'" && exit 1)

migrate: ## Run database migrations against the development database
	@echo "Running database migrations for dev environment..."
	@ln -sf .env.dev .env
	$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(DEV_PROJECT_NAME) exec api sh -c ". /app/.venv/bin/activate && alembic upgrade head"

# ==============================================================================
# CODE QUALITY & TESTING
# ==============================================================================

format: ## Format the code using Black
	@echo "Formatting code with Black..."
	poetry run black src/ tests/

format-check: ## Check if the code is formatted with Black
	@echo "Checking code format with Black..."
	poetry run black --check src/ tests/

lint: ## Lint and fix the code with Ruff automatically
	@echo "Linting and fixing code with Ruff..."
	poetry run ruff check src/ tests/ --fix

lint-check: ## Check the code for issues with Ruff
	@echo "Checking code with Ruff..."
	poetry run ruff check src/ tests/

test: ## Run the unit and integration test suite in a clean, isolated environment.
	@echo "==> Running test suite..."
	@ln -sf .env.test .env
	@cleanup() { \
		echo "\n==> Cleaning up test environment..."; \
		$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(TEST_PROJECT_NAME) down --remove-orphans; \
		rm -f .env; \
	}
	@trap cleanup EXIT
	@echo "\n==> Starting test containers..."
	@$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(TEST_PROJECT_NAME) up -d --build
	@echo "\n==> Running pytest..."
	@$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(TEST_PROJECT_NAME) exec api pytest

e2e-test: ## Run end-to-end tests against a live, containerized environment.
	@echo "==> Running end-to-end tests..."
	@ln -sf .env.test .env
	@cleanup() { \
		echo "\n==> Cleaning up E2E test environment..."; \
		$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(TEST_PROJECT_NAME) down --remove-orphans; \
		rm -f .env; \
	}
	@trap cleanup EXIT
	@echo "\n==> Starting E2E test containers..."
	@$(SUDO) docker compose -f docker-compose.yml -f docker-compose.override.yml --project-name $(TEST_PROJECT_NAME) up -d --build
	@echo "\n==> Waiting for API service to be healthy..."
	@HOST_PORT=$$(grep HOST_PORT .env.test | cut -d '=' -f 2); \
	timeout 120s bash -c \
		'while [[ "$$(curl -s -o /dev/null -w ''%{http_code}'' http://127.0.0.1:'$${HOST_PORT}'/health)" != "200" ]]; do \
			echo "API not ready yet. Waiting..."; \
			sleep 5; \
		done'
	@echo "\n==> API is healthy. Running curl tests..."
	@HOST_PORT=$$(grep HOST_PORT .env.test | cut -d '=' -f 2); \
	echo "Testing health endpoint..."; \
	curl --fail --silent --show-error http://127.0.0.1:$${HOST_PORT}/health || exit 1; \
	echo "\nTesting generate endpoint..."; \
	curl --fail --silent --show-error -X POST http://127.0.0.1:$${HOST_PORT}/api/v1/generate \
		-H "Content-Type: application/json" \
		-d '{"model": "qwen3:0.6b", "prompt": "Why is the sky blue?", "stream": false}' || exit 1;
	@echo "\n==> E2E tests passed successfully."